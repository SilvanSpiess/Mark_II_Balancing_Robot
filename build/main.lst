ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
  21              		.align	1
  22              		.global	HAL_GPIO_EXTI_Callback
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HAL_GPIO_EXTI_Callback:
  28              	.LVL0:
  29              	.LFB242:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "adc.h"
  22:Core/Src/main.c **** #include "dma.h"
  23:Core/Src/main.c **** #include "spi.h"
  24:Core/Src/main.c **** #include "tim.h"
  25:Core/Src/main.c **** #include "usart.h"
  26:Core/Src/main.c **** #include "gpio.h"
  27:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/main.c **** #include "joyStick.h"
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 2


  30:Core/Src/main.c **** #include "lcd_menu_definition.h"
  31:Core/Src/main.c **** #include "my_event_handler.h"
  32:Core/Src/main.c **** /* USER CODE END Includes */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** volatile int32_t ms_menu_ticks, ms_sample_ticks, ms_smooth_ticks = 0;
  38:Core/Src/main.c **** AppData main_data = {0};
  39:Core/Src/main.c **** uint16_t pot1_sums, pot2_sums = 0;
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PTD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PD */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  49:Core/Src/main.c **** /* USER CODE BEGIN PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE END PM */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE BEGIN PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* USER CODE END PV */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  60:Core/Src/main.c **** void SystemClock_Config(void);
  61:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* USER CODE END PFP */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  66:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  67:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
  30              		.loc 1 67 48 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  68:Core/Src/main.c ****   if(GPIO_Pin == ROTATION_SENSOR_Pin) {
  35              		.loc 1 68 3 view .LVU1
  36              		.loc 1 68 5 is_stmt 0 view .LVU2
  37 0000 B0F5006F 		cmp	r0, #2048
  38 0004 00D0     		beq	.L3
  39              	.L1:
  69:Core/Src/main.c ****     main_data.current.rotation_counter++;
  70:Core/Src/main.c ****   }
  71:Core/Src/main.c **** }
  40              		.loc 1 71 1 view .LVU3
  41 0006 7047     		bx	lr
  42              	.L3:
  69:Core/Src/main.c ****     main_data.current.rotation_counter++;
  43              		.loc 1 69 5 is_stmt 1 view .LVU4
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 3


  69:Core/Src/main.c ****     main_data.current.rotation_counter++;
  44              		.loc 1 69 22 is_stmt 0 view .LVU5
  45 0008 024A     		ldr	r2, .L4
  46 000a 9388     		ldrh	r3, [r2, #4]
  69:Core/Src/main.c ****     main_data.current.rotation_counter++;
  47              		.loc 1 69 39 view .LVU6
  48 000c 0133     		adds	r3, r3, #1
  49 000e 9380     		strh	r3, [r2, #4]	@ movhi
  50              		.loc 1 71 1 view .LVU7
  51 0010 F9E7     		b	.L1
  52              	.L5:
  53 0012 00BF     		.align	2
  54              	.L4:
  55 0014 00000000 		.word	main_data
  56              		.cfi_endproc
  57              	.LFE242:
  59              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
  60              		.align	1
  61              		.global	HAL_SYSTICK_Callback
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  66              	HAL_SYSTICK_Callback:
  67              	.LFB243:
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** void HAL_SYSTICK_Callback(void) {
  68              		.loc 1 73 33 is_stmt 1 view -0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  74:Core/Src/main.c **** 	ms_menu_ticks++;
  73              		.loc 1 74 2 view .LVU9
  74              		.loc 1 74 15 is_stmt 0 view .LVU10
  75 0000 064A     		ldr	r2, .L7
  76 0002 1368     		ldr	r3, [r2]
  77 0004 0133     		adds	r3, r3, #1
  78 0006 1360     		str	r3, [r2]
  75:Core/Src/main.c **** 	ms_sample_ticks++;
  79              		.loc 1 75 2 is_stmt 1 view .LVU11
  80              		.loc 1 75 17 is_stmt 0 view .LVU12
  81 0008 054A     		ldr	r2, .L7+4
  82 000a 1368     		ldr	r3, [r2]
  83 000c 0133     		adds	r3, r3, #1
  84 000e 1360     		str	r3, [r2]
  76:Core/Src/main.c ****   ms_smooth_ticks++;
  85              		.loc 1 76 3 is_stmt 1 view .LVU13
  86              		.loc 1 76 18 is_stmt 0 view .LVU14
  87 0010 044A     		ldr	r2, .L7+8
  88 0012 1368     		ldr	r3, [r2]
  89 0014 0133     		adds	r3, r3, #1
  90 0016 1360     		str	r3, [r2]
  77:Core/Src/main.c **** }
  91              		.loc 1 77 1 view .LVU15
  92 0018 7047     		bx	lr
  93              	.L8:
  94 001a 00BF     		.align	2
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 4


  95              	.L7:
  96 001c 00000000 		.word	ms_menu_ticks
  97 0020 00000000 		.word	ms_sample_ticks
  98 0024 00000000 		.word	ms_smooth_ticks
  99              		.cfi_endproc
 100              	.LFE243:
 102              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 103              		.align	1
 104              		.global	HAL_TIM_PeriodElapsedCallback
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 109              	HAL_TIM_PeriodElapsedCallback:
 110              	.LVL1:
 111              	.LFB244:
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 112              		.loc 1 79 61 is_stmt 1 view -0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
  80:Core/Src/main.c ****   if(htim == &htim6) {
 117              		.loc 1 80 3 view .LVU17
 118              		.loc 1 80 5 is_stmt 0 view .LVU18
 119 0000 064B     		ldr	r3, .L12
 120 0002 8342     		cmp	r3, r0
 121 0004 00D0     		beq	.L11
 122              	.L9:
  81:Core/Src/main.c ****     main_data.current.rotation_speed = main_data.current.rotation_counter*30;
  82:Core/Src/main.c ****     main_data.current.rotation_counter = 0;
  83:Core/Src/main.c ****   }
  84:Core/Src/main.c **** }
 123              		.loc 1 84 1 view .LVU19
 124 0006 7047     		bx	lr
 125              	.L11:
  81:Core/Src/main.c ****     main_data.current.rotation_speed = main_data.current.rotation_counter*30;
 126              		.loc 1 81 5 is_stmt 1 view .LVU20
  81:Core/Src/main.c ****     main_data.current.rotation_speed = main_data.current.rotation_counter*30;
 127              		.loc 1 81 57 is_stmt 0 view .LVU21
 128 0008 054A     		ldr	r2, .L12+4
 129 000a 9388     		ldrh	r3, [r2, #4]
  81:Core/Src/main.c ****     main_data.current.rotation_speed = main_data.current.rotation_counter*30;
 130              		.loc 1 81 38 view .LVU22
 131 000c C3EB0313 		rsb	r3, r3, r3, lsl #4
 132 0010 5B00     		lsls	r3, r3, #1
 133 0012 D380     		strh	r3, [r2, #6]	@ movhi
  82:Core/Src/main.c ****   }
 134              		.loc 1 82 5 is_stmt 1 view .LVU23
  82:Core/Src/main.c ****   }
 135              		.loc 1 82 40 is_stmt 0 view .LVU24
 136 0014 0023     		movs	r3, #0
 137 0016 9380     		strh	r3, [r2, #4]	@ movhi
 138              		.loc 1 84 1 view .LVU25
 139 0018 F5E7     		b	.L9
 140              	.L13:
 141 001a 00BF     		.align	2
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 5


 142              	.L12:
 143 001c 00000000 		.word	htim6
 144 0020 00000000 		.word	main_data
 145              		.cfi_endproc
 146              	.LFE244:
 148              		.section	.text.Error_Handler,"ax",%progbits
 149              		.align	1
 150              		.global	Error_Handler
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 155              	Error_Handler:
 156              	.LFB247:
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** /* USER CODE END 0 */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** /**
  89:Core/Src/main.c ****   * @brief  The application entry point.
  90:Core/Src/main.c ****   * @retval int
  91:Core/Src/main.c ****   */
  92:Core/Src/main.c **** int main(void)
  93:Core/Src/main.c **** {
  94:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* USER CODE END 1 */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 101:Core/Src/main.c ****   HAL_Init();
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* USER CODE END Init */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* Configure the system clock */
 108:Core/Src/main.c ****   SystemClock_Config();
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /** Configure the Systick interrupt time */
 113:Core/Src/main.c ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 114:Core/Src/main.c ****   /** Configure the Systick */
 115:Core/Src/main.c ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 116:Core/Src/main.c ****   /* SysTick_IRQn interrupt configuration */
 117:Core/Src/main.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* USER CODE END SysInit */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* Initialize all configured peripherals */
 122:Core/Src/main.c ****   MX_GPIO_Init();
 123:Core/Src/main.c ****   MX_DMA_Init();
 124:Core/Src/main.c ****   MX_TIM6_Init();
 125:Core/Src/main.c ****   MX_ADC1_Init();
 126:Core/Src/main.c ****   MX_USART2_UART_Init();
 127:Core/Src/main.c ****   MX_SPI1_Init();
 128:Core/Src/main.c ****   MX_TIM3_Init();
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 6


 129:Core/Src/main.c ****   MX_TIM2_Init();
 130:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****   lcd_init();
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   main_data.current.PSC_on = 0;
 135:Core/Src/main.c ****   main_data.current.mode = CLOCK_WISE;
 136:Core/Src/main.c ****   main_data.current.number_of_samples = 5;
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   menu_setMainMenu(&mainMenu);
 139:Core/Src/main.c ****   Joystick joystick;
 140:Core/Src/main.c ****   Joystick_init(&joystick);
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   menu_navigation next_navigation = MENU_NOP;
 143:Core/Src/main.c ****   menu_event event = MENU_NO_EVENT;
 144:Core/Src/main.c ****   menu_event current_event = MENU_NO_EVENT;
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1,(uint32_t *) &main_data.current.pot1,2);
 147:Core/Src/main.c ****   
 148:Core/Src/main.c ****   menu_registerDrawMenuItem2(drawMenuItem_Callback2, &main_data);
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim6);
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****  	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 153:Core/Src/main.c ****  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 154:Core/Src/main.c ****   
 155:Core/Src/main.c ****   screen_setup();
 156:Core/Src/main.c ****   /* USER CODE END 2 */
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   /* Infinite loop */
 159:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 160:Core/Src/main.c ****   while (1)
 161:Core/Src/main.c ****   {
 162:Core/Src/main.c ****     /* USER CODE END WHILE */
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 165:Core/Src/main.c ****         
 166:Core/Src/main.c ****     
 167:Core/Src/main.c ****     if (ms_sample_ticks >= 1) {
 168:Core/Src/main.c **** 	    ms_sample_ticks = 0;
 169:Core/Src/main.c **** 	    joystick.sample(&joystick);
 170:Core/Src/main.c ****     }
 171:Core/Src/main.c ****     if (ms_menu_ticks >= 20) {
 172:Core/Src/main.c ****       ms_menu_ticks = 0;  
 173:Core/Src/main.c ****       if(ms_smooth_ticks >= (20*main_data.current.number_of_samples)) {
 174:Core/Src/main.c ****         ms_smooth_ticks = 0;
 175:Core/Src/main.c ****         main_data.averaged_over_5.pot1 = pot1_sums/main_data.current.number_of_samples;
 176:Core/Src/main.c ****         main_data.averaged_over_5.pot2 = pot2_sums/main_data.current.number_of_samples;
 177:Core/Src/main.c ****         pot1_sums = 0;
 178:Core/Src/main.c ****         pot2_sums = 0;
 179:Core/Src/main.c ****       }    
 180:Core/Src/main.c ****       pot1_sums += main_data.current.pot1;
 181:Core/Src/main.c ****       pot2_sums += main_data.current.pot2;
 182:Core/Src/main.c ****       next_navigation = (menu_navigation)joystick.getDirection(&joystick);
 183:Core/Src/main.c ****       event = menu_update(next_navigation);
 184:Core/Src/main.c ****       menu_show();
 185:Core/Src/main.c ****       check_joystick(next_navigation, current_event, &main_data);
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 7


 186:Core/Src/main.c ****       
 187:Core/Src/main.c ****       if(event == MENU_STOP_EVENT) {
 188:Core/Src/main.c ****         handleMenuExitEvent((int) current_event, &main_data);
 189:Core/Src/main.c ****         current_event = MENU_NO_EVENT;
 190:Core/Src/main.c ****       }
 191:Core/Src/main.c ****       else {
 192:Core/Src/main.c ****         handleMenuEntryEvent((int) event, &main_data);
 193:Core/Src/main.c ****         if(event != MENU_NO_EVENT) current_event = event;
 194:Core/Src/main.c ****       }
 195:Core/Src/main.c ****     }
 196:Core/Src/main.c ****   }
 197:Core/Src/main.c ****   /* USER CODE END 3 */
 198:Core/Src/main.c **** }
 199:Core/Src/main.c **** 
 200:Core/Src/main.c **** /**
 201:Core/Src/main.c ****   * @brief System Clock Configuration
 202:Core/Src/main.c ****   * @retval None
 203:Core/Src/main.c ****   */
 204:Core/Src/main.c **** void SystemClock_Config(void)
 205:Core/Src/main.c **** {
 206:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 207:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 210:Core/Src/main.c ****   */
 211:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 212:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 215:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 216:Core/Src/main.c ****   */
 217:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 218:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 219:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 180;
 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 227:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 228:Core/Src/main.c ****   {
 229:Core/Src/main.c ****     Error_Handler();
 230:Core/Src/main.c ****   }
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /** Activate the Over-Drive mode
 233:Core/Src/main.c ****   */
 234:Core/Src/main.c ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 235:Core/Src/main.c ****   {
 236:Core/Src/main.c ****     Error_Handler();
 237:Core/Src/main.c ****   }
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 240:Core/Src/main.c ****   */
 241:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 242:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 8


 243:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 244:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 245:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 246:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 249:Core/Src/main.c ****   {
 250:Core/Src/main.c ****     Error_Handler();
 251:Core/Src/main.c ****   }
 252:Core/Src/main.c **** }
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c **** /* USER CODE END 4 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c **** /**
 259:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 260:Core/Src/main.c ****   * @retval None
 261:Core/Src/main.c ****   */
 262:Core/Src/main.c **** void Error_Handler(void)
 263:Core/Src/main.c **** {
 157              		.loc 1 263 1 is_stmt 1 view -0
 158              		.cfi_startproc
 159              		@ Volatile: function does not return.
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 264:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 265:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 266:Core/Src/main.c ****   __disable_irq();
 163              		.loc 1 266 3 view .LVU27
 164              	.LBB4:
 165              	.LBI4:
 166              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 9


  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 10


  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 11


 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 12


 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 13


 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 14


 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 15


 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 16


 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 17


 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 18


 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 19


 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 20


 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 21


 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 22


 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 23


 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 24


 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 25


 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 167              		.loc 2 960 27 view .LVU28
 168              	.LBB5:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 169              		.loc 2 962 3 view .LVU29
 170              		.syntax unified
 171              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 172 0000 72B6     		cpsid i
 173              	@ 0 "" 2
 174              		.thumb
 175              		.syntax unified
 176              	.L15:
 177              	.LBE5:
 178              	.LBE4:
 267:Core/Src/main.c ****   while (1) {
 179              		.loc 1 267 3 view .LVU30
 268:Core/Src/main.c ****   }
 180              		.loc 1 268 3 view .LVU31
 267:Core/Src/main.c ****   while (1) {
 181              		.loc 1 267 9 view .LVU32
 182 0002 FEE7     		b	.L15
 183              		.cfi_endproc
 184              	.LFE247:
 186              		.section	.text.SystemClock_Config,"ax",%progbits
 187              		.align	1
 188              		.global	SystemClock_Config
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 193              	SystemClock_Config:
 194              	.LFB246:
 205:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 26


 195              		.loc 1 205 1 view -0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 80
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199 0000 00B5     		push	{lr}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 14, -4
 202 0002 95B0     		sub	sp, sp, #84
 203              		.cfi_def_cfa_offset 88
 206:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 204              		.loc 1 206 3 view .LVU34
 206:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 205              		.loc 1 206 22 is_stmt 0 view .LVU35
 206 0004 3422     		movs	r2, #52
 207 0006 0021     		movs	r1, #0
 208 0008 07A8     		add	r0, sp, #28
 209 000a FFF7FEFF 		bl	memset
 210              	.LVL2:
 207:Core/Src/main.c **** 
 211              		.loc 1 207 3 is_stmt 1 view .LVU36
 207:Core/Src/main.c **** 
 212              		.loc 1 207 22 is_stmt 0 view .LVU37
 213 000e 0023     		movs	r3, #0
 214 0010 0293     		str	r3, [sp, #8]
 215 0012 0393     		str	r3, [sp, #12]
 216 0014 0493     		str	r3, [sp, #16]
 217 0016 0593     		str	r3, [sp, #20]
 218 0018 0693     		str	r3, [sp, #24]
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 219              		.loc 1 211 3 is_stmt 1 view .LVU38
 220              	.LBB6:
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 221              		.loc 1 211 3 view .LVU39
 222 001a 0093     		str	r3, [sp]
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 223              		.loc 1 211 3 view .LVU40
 224 001c 224A     		ldr	r2, .L24
 225 001e 116C     		ldr	r1, [r2, #64]
 226 0020 41F08051 		orr	r1, r1, #268435456
 227 0024 1164     		str	r1, [r2, #64]
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 228              		.loc 1 211 3 view .LVU41
 229 0026 126C     		ldr	r2, [r2, #64]
 230 0028 02F08052 		and	r2, r2, #268435456
 231 002c 0092     		str	r2, [sp]
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 232              		.loc 1 211 3 view .LVU42
 233 002e 009A     		ldr	r2, [sp]
 234              	.LBE6:
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 235              		.loc 1 211 3 view .LVU43
 212:Core/Src/main.c **** 
 236              		.loc 1 212 3 view .LVU44
 237              	.LBB7:
 212:Core/Src/main.c **** 
 238              		.loc 1 212 3 view .LVU45
 239 0030 0193     		str	r3, [sp, #4]
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 27


 212:Core/Src/main.c **** 
 240              		.loc 1 212 3 view .LVU46
 241 0032 1E4A     		ldr	r2, .L24+4
 242 0034 1168     		ldr	r1, [r2]
 243 0036 41F44041 		orr	r1, r1, #49152
 244 003a 1160     		str	r1, [r2]
 212:Core/Src/main.c **** 
 245              		.loc 1 212 3 view .LVU47
 246 003c 1268     		ldr	r2, [r2]
 247 003e 02F44042 		and	r2, r2, #49152
 248 0042 0192     		str	r2, [sp, #4]
 212:Core/Src/main.c **** 
 249              		.loc 1 212 3 view .LVU48
 250 0044 019A     		ldr	r2, [sp, #4]
 251              	.LBE7:
 212:Core/Src/main.c **** 
 252              		.loc 1 212 3 view .LVU49
 217:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 253              		.loc 1 217 3 view .LVU50
 217:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 254              		.loc 1 217 36 is_stmt 0 view .LVU51
 255 0046 0222     		movs	r2, #2
 256 0048 0792     		str	r2, [sp, #28]
 218:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 257              		.loc 1 218 3 is_stmt 1 view .LVU52
 218:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 258              		.loc 1 218 30 is_stmt 0 view .LVU53
 259 004a 0121     		movs	r1, #1
 260 004c 0A91     		str	r1, [sp, #40]
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 261              		.loc 1 219 3 is_stmt 1 view .LVU54
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 262              		.loc 1 219 41 is_stmt 0 view .LVU55
 263 004e 1021     		movs	r1, #16
 264 0050 0B91     		str	r1, [sp, #44]
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 265              		.loc 1 220 3 is_stmt 1 view .LVU56
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 266              		.loc 1 220 34 is_stmt 0 view .LVU57
 267 0052 0D92     		str	r2, [sp, #52]
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 268              		.loc 1 221 3 is_stmt 1 view .LVU58
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 269              		.loc 1 221 35 is_stmt 0 view .LVU59
 270 0054 0E93     		str	r3, [sp, #56]
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 180;
 271              		.loc 1 222 3 is_stmt 1 view .LVU60
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 180;
 272              		.loc 1 222 30 is_stmt 0 view .LVU61
 273 0056 0823     		movs	r3, #8
 274 0058 0F93     		str	r3, [sp, #60]
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 275              		.loc 1 223 3 is_stmt 1 view .LVU62
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 276              		.loc 1 223 30 is_stmt 0 view .LVU63
 277 005a B423     		movs	r3, #180
 278 005c 1093     		str	r3, [sp, #64]
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 28


 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 279              		.loc 1 224 3 is_stmt 1 view .LVU64
 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 280              		.loc 1 224 30 is_stmt 0 view .LVU65
 281 005e 1192     		str	r2, [sp, #68]
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 282              		.loc 1 225 3 is_stmt 1 view .LVU66
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 283              		.loc 1 225 30 is_stmt 0 view .LVU67
 284 0060 1292     		str	r2, [sp, #72]
 226:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 285              		.loc 1 226 3 is_stmt 1 view .LVU68
 226:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 286              		.loc 1 226 30 is_stmt 0 view .LVU69
 287 0062 1392     		str	r2, [sp, #76]
 227:Core/Src/main.c ****   {
 288              		.loc 1 227 3 is_stmt 1 view .LVU70
 227:Core/Src/main.c ****   {
 289              		.loc 1 227 7 is_stmt 0 view .LVU71
 290 0064 07A8     		add	r0, sp, #28
 291 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 292              	.LVL3:
 227:Core/Src/main.c ****   {
 293              		.loc 1 227 6 discriminator 1 view .LVU72
 294 006a B0B9     		cbnz	r0, .L21
 234:Core/Src/main.c ****   {
 295              		.loc 1 234 3 is_stmt 1 view .LVU73
 234:Core/Src/main.c ****   {
 296              		.loc 1 234 7 is_stmt 0 view .LVU74
 297 006c FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 298              	.LVL4:
 234:Core/Src/main.c ****   {
 299              		.loc 1 234 6 discriminator 1 view .LVU75
 300 0070 A8B9     		cbnz	r0, .L22
 241:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 301              		.loc 1 241 3 is_stmt 1 view .LVU76
 241:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 302              		.loc 1 241 31 is_stmt 0 view .LVU77
 303 0072 0F23     		movs	r3, #15
 304 0074 0293     		str	r3, [sp, #8]
 243:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 305              		.loc 1 243 3 is_stmt 1 view .LVU78
 243:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 306              		.loc 1 243 34 is_stmt 0 view .LVU79
 307 0076 0223     		movs	r3, #2
 308 0078 0393     		str	r3, [sp, #12]
 244:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 309              		.loc 1 244 3 is_stmt 1 view .LVU80
 244:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 310              		.loc 1 244 35 is_stmt 0 view .LVU81
 311 007a 0023     		movs	r3, #0
 312 007c 0493     		str	r3, [sp, #16]
 245:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 313              		.loc 1 245 3 is_stmt 1 view .LVU82
 245:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 314              		.loc 1 245 36 is_stmt 0 view .LVU83
 315 007e 4FF4A053 		mov	r3, #5120
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 29


 316 0082 0593     		str	r3, [sp, #20]
 246:Core/Src/main.c **** 
 317              		.loc 1 246 3 is_stmt 1 view .LVU84
 246:Core/Src/main.c **** 
 318              		.loc 1 246 36 is_stmt 0 view .LVU85
 319 0084 4FF48053 		mov	r3, #4096
 320 0088 0693     		str	r3, [sp, #24]
 248:Core/Src/main.c ****   {
 321              		.loc 1 248 3 is_stmt 1 view .LVU86
 248:Core/Src/main.c ****   {
 322              		.loc 1 248 7 is_stmt 0 view .LVU87
 323 008a 0521     		movs	r1, #5
 324 008c 02A8     		add	r0, sp, #8
 325 008e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 326              	.LVL5:
 248:Core/Src/main.c ****   {
 327              		.loc 1 248 6 discriminator 1 view .LVU88
 328 0092 30B9     		cbnz	r0, .L23
 252:Core/Src/main.c **** 
 329              		.loc 1 252 1 view .LVU89
 330 0094 15B0     		add	sp, sp, #84
 331              		.cfi_remember_state
 332              		.cfi_def_cfa_offset 4
 333              		@ sp needed
 334 0096 5DF804FB 		ldr	pc, [sp], #4
 335              	.L21:
 336              		.cfi_restore_state
 229:Core/Src/main.c ****   }
 337              		.loc 1 229 5 is_stmt 1 view .LVU90
 338 009a FFF7FEFF 		bl	Error_Handler
 339              	.LVL6:
 340              	.L22:
 236:Core/Src/main.c ****   }
 341              		.loc 1 236 5 view .LVU91
 342 009e FFF7FEFF 		bl	Error_Handler
 343              	.LVL7:
 344              	.L23:
 250:Core/Src/main.c ****   }
 345              		.loc 1 250 5 view .LVU92
 346 00a2 FFF7FEFF 		bl	Error_Handler
 347              	.LVL8:
 348              	.L25:
 349 00a6 00BF     		.align	2
 350              	.L24:
 351 00a8 00380240 		.word	1073887232
 352 00ac 00700040 		.word	1073770496
 353              		.cfi_endproc
 354              	.LFE246:
 356              		.section	.text.main,"ax",%progbits
 357              		.align	1
 358              		.global	main
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 363              	main:
 364              	.LFB245:
  93:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 30


 365              		.loc 1 93 1 view -0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 32
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 370              		.cfi_def_cfa_offset 20
 371              		.cfi_offset 4, -20
 372              		.cfi_offset 5, -16
 373              		.cfi_offset 6, -12
 374              		.cfi_offset 7, -8
 375              		.cfi_offset 14, -4
 376 0002 89B0     		sub	sp, sp, #36
 377              		.cfi_def_cfa_offset 56
 101:Core/Src/main.c **** 
 378              		.loc 1 101 3 view .LVU94
 379 0004 FFF7FEFF 		bl	HAL_Init
 380              	.LVL9:
 108:Core/Src/main.c **** 
 381              		.loc 1 108 3 view .LVU95
 382 0008 FFF7FEFF 		bl	SystemClock_Config
 383              	.LVL10:
 113:Core/Src/main.c ****   /** Configure the Systick */
 384              		.loc 1 113 3 view .LVU96
 113:Core/Src/main.c ****   /** Configure the Systick */
 385              		.loc 1 113 22 is_stmt 0 view .LVU97
 386 000c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 387              	.LVL11:
 113:Core/Src/main.c ****   /** Configure the Systick */
 388              		.loc 1 113 3 discriminator 1 view .LVU98
 389 0010 4D4B     		ldr	r3, .L38
 390 0012 A3FB0030 		umull	r3, r0, r3, r0
 391 0016 8009     		lsrs	r0, r0, #6
 392 0018 FFF7FEFF 		bl	HAL_SYSTICK_Config
 393              	.LVL12:
 115:Core/Src/main.c ****   /* SysTick_IRQn interrupt configuration */
 394              		.loc 1 115 3 is_stmt 1 view .LVU99
 395 001c 0420     		movs	r0, #4
 396 001e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 397              	.LVL13:
 117:Core/Src/main.c **** 
 398              		.loc 1 117 3 view .LVU100
 399 0022 0022     		movs	r2, #0
 400 0024 1146     		mov	r1, r2
 401 0026 4FF0FF30 		mov	r0, #-1
 402 002a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 403              	.LVL14:
 122:Core/Src/main.c ****   MX_DMA_Init();
 404              		.loc 1 122 3 view .LVU101
 405 002e FFF7FEFF 		bl	MX_GPIO_Init
 406              	.LVL15:
 123:Core/Src/main.c ****   MX_TIM6_Init();
 407              		.loc 1 123 3 view .LVU102
 408 0032 FFF7FEFF 		bl	MX_DMA_Init
 409              	.LVL16:
 124:Core/Src/main.c ****   MX_ADC1_Init();
 410              		.loc 1 124 3 view .LVU103
 411 0036 FFF7FEFF 		bl	MX_TIM6_Init
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 31


 412              	.LVL17:
 125:Core/Src/main.c ****   MX_USART2_UART_Init();
 413              		.loc 1 125 3 view .LVU104
 414 003a FFF7FEFF 		bl	MX_ADC1_Init
 415              	.LVL18:
 126:Core/Src/main.c ****   MX_SPI1_Init();
 416              		.loc 1 126 3 view .LVU105
 417 003e FFF7FEFF 		bl	MX_USART2_UART_Init
 418              	.LVL19:
 127:Core/Src/main.c ****   MX_TIM3_Init();
 419              		.loc 1 127 3 view .LVU106
 420 0042 FFF7FEFF 		bl	MX_SPI1_Init
 421              	.LVL20:
 128:Core/Src/main.c ****   MX_TIM2_Init();
 422              		.loc 1 128 3 view .LVU107
 423 0046 FFF7FEFF 		bl	MX_TIM3_Init
 424              	.LVL21:
 129:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 425              		.loc 1 129 3 view .LVU108
 426 004a FFF7FEFF 		bl	MX_TIM2_Init
 427              	.LVL22:
 132:Core/Src/main.c **** 
 428              		.loc 1 132 3 view .LVU109
 429 004e FFF7FEFF 		bl	lcd_init
 430              	.LVL23:
 134:Core/Src/main.c ****   main_data.current.mode = CLOCK_WISE;
 431              		.loc 1 134 3 view .LVU110
 134:Core/Src/main.c ****   main_data.current.mode = CLOCK_WISE;
 432              		.loc 1 134 28 is_stmt 0 view .LVU111
 433 0052 3E4D     		ldr	r5, .L38+4
 434 0054 0024     		movs	r4, #0
 435 0056 EC81     		strh	r4, [r5, #14]	@ movhi
 135:Core/Src/main.c ****   main_data.current.number_of_samples = 5;
 436              		.loc 1 135 3 is_stmt 1 view .LVU112
 135:Core/Src/main.c ****   main_data.current.number_of_samples = 5;
 437              		.loc 1 135 26 is_stmt 0 view .LVU113
 438 0058 2C74     		strb	r4, [r5, #16]
 136:Core/Src/main.c **** 
 439              		.loc 1 136 3 is_stmt 1 view .LVU114
 136:Core/Src/main.c **** 
 440              		.loc 1 136 39 is_stmt 0 view .LVU115
 441 005a 0523     		movs	r3, #5
 442 005c AB81     		strh	r3, [r5, #12]	@ movhi
 138:Core/Src/main.c ****   Joystick joystick;
 443              		.loc 1 138 3 is_stmt 1 view .LVU116
 444 005e 3C48     		ldr	r0, .L38+8
 445 0060 FFF7FEFF 		bl	menu_setMainMenu
 446              	.LVL24:
 139:Core/Src/main.c ****   Joystick_init(&joystick);
 447              		.loc 1 139 3 view .LVU117
 140:Core/Src/main.c **** 
 448              		.loc 1 140 3 view .LVU118
 449 0064 01A8     		add	r0, sp, #4
 450 0066 FFF7FEFF 		bl	Joystick_init
 451              	.LVL25:
 142:Core/Src/main.c ****   menu_event event = MENU_NO_EVENT;
 452              		.loc 1 142 3 view .LVU119
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 32


 143:Core/Src/main.c ****   menu_event current_event = MENU_NO_EVENT;
 453              		.loc 1 143 3 view .LVU120
 144:Core/Src/main.c **** 
 454              		.loc 1 144 3 view .LVU121
 146:Core/Src/main.c ****   
 455              		.loc 1 146 3 view .LVU122
 456 006a 0222     		movs	r2, #2
 457 006c 2946     		mov	r1, r5
 458 006e 3948     		ldr	r0, .L38+12
 459 0070 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 460              	.LVL26:
 148:Core/Src/main.c **** 
 461              		.loc 1 148 3 view .LVU123
 462 0074 2946     		mov	r1, r5
 463 0076 3848     		ldr	r0, .L38+16
 464 0078 FFF7FEFF 		bl	menu_registerDrawMenuItem2
 465              	.LVL27:
 150:Core/Src/main.c **** 
 466              		.loc 1 150 3 view .LVU124
 467 007c 3748     		ldr	r0, .L38+20
 468 007e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 469              	.LVL28:
 152:Core/Src/main.c ****  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 470              		.loc 1 152 3 view .LVU125
 471 0082 2246     		mov	r2, r4
 472 0084 4FF40071 		mov	r1, #512
 473 0088 3548     		ldr	r0, .L38+24
 474 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 475              	.LVL29:
 153:Core/Src/main.c ****   
 476              		.loc 1 153 3 view .LVU126
 477 008e 0122     		movs	r2, #1
 478 0090 8021     		movs	r1, #128
 479 0092 3448     		ldr	r0, .L38+28
 480 0094 FFF7FEFF 		bl	HAL_GPIO_WritePin
 481              	.LVL30:
 155:Core/Src/main.c ****   /* USER CODE END 2 */
 482              		.loc 1 155 3 view .LVU127
 483 0098 FFF7FEFF 		bl	screen_setup
 484              	.LVL31:
 485 009c 09E0     		b	.L29
 486              	.LVL32:
 487              	.L37:
 168:Core/Src/main.c **** 	    joystick.sample(&joystick);
 488              		.loc 1 168 6 view .LVU128
 168:Core/Src/main.c **** 	    joystick.sample(&joystick);
 489              		.loc 1 168 22 is_stmt 0 view .LVU129
 490 009e 324B     		ldr	r3, .L38+32
 491 00a0 0022     		movs	r2, #0
 492 00a2 1A60     		str	r2, [r3]
 169:Core/Src/main.c ****     }
 493              		.loc 1 169 6 is_stmt 1 view .LVU130
 494 00a4 01A8     		add	r0, sp, #4
 495 00a6 069B     		ldr	r3, [sp, #24]
 496 00a8 9847     		blx	r3
 497              	.LVL33:
 498              	.L28:
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 33


 171:Core/Src/main.c ****       ms_menu_ticks = 0;  
 499              		.loc 1 171 5 view .LVU131
 171:Core/Src/main.c ****       ms_menu_ticks = 0;  
 500              		.loc 1 171 23 is_stmt 0 view .LVU132
 501 00aa 304B     		ldr	r3, .L38+36
 502 00ac 1B68     		ldr	r3, [r3]
 171:Core/Src/main.c ****       ms_menu_ticks = 0;  
 503              		.loc 1 171 8 view .LVU133
 504 00ae 132B     		cmp	r3, #19
 505 00b0 04DC     		bgt	.L36
 506              	.LVL34:
 507              	.L29:
 160:Core/Src/main.c ****   {
 508              		.loc 1 160 3 is_stmt 1 view .LVU134
 167:Core/Src/main.c **** 	    ms_sample_ticks = 0;
 509              		.loc 1 167 5 view .LVU135
 167:Core/Src/main.c **** 	    ms_sample_ticks = 0;
 510              		.loc 1 167 25 is_stmt 0 view .LVU136
 511 00b2 2D4B     		ldr	r3, .L38+32
 512 00b4 1B68     		ldr	r3, [r3]
 167:Core/Src/main.c **** 	    ms_sample_ticks = 0;
 513              		.loc 1 167 8 view .LVU137
 514 00b6 002B     		cmp	r3, #0
 515 00b8 F1DC     		bgt	.L37
 516 00ba F6E7     		b	.L28
 517              	.L36:
 172:Core/Src/main.c ****       if(ms_smooth_ticks >= (20*main_data.current.number_of_samples)) {
 518              		.loc 1 172 7 is_stmt 1 view .LVU138
 172:Core/Src/main.c ****       if(ms_smooth_ticks >= (20*main_data.current.number_of_samples)) {
 519              		.loc 1 172 21 is_stmt 0 view .LVU139
 520 00bc 2B4B     		ldr	r3, .L38+36
 521 00be 0022     		movs	r2, #0
 522 00c0 1A60     		str	r2, [r3]
 173:Core/Src/main.c ****         ms_smooth_ticks = 0;
 523              		.loc 1 173 7 is_stmt 1 view .LVU140
 173:Core/Src/main.c ****         ms_smooth_ticks = 0;
 524              		.loc 1 173 50 is_stmt 0 view .LVU141
 525 00c2 224B     		ldr	r3, .L38+4
 526 00c4 9B89     		ldrh	r3, [r3, #12]
 173:Core/Src/main.c ****         ms_smooth_ticks = 0;
 527              		.loc 1 173 32 view .LVU142
 528 00c6 03EB8301 		add	r1, r3, r3, lsl #2
 173:Core/Src/main.c ****         ms_smooth_ticks = 0;
 529              		.loc 1 173 26 view .LVU143
 530 00ca 294A     		ldr	r2, .L38+40
 531 00cc 1268     		ldr	r2, [r2]
 173:Core/Src/main.c ****         ms_smooth_ticks = 0;
 532              		.loc 1 173 9 view .LVU144
 533 00ce B2EB810F 		cmp	r2, r1, lsl #2
 534 00d2 0FDB     		blt	.L30
 174:Core/Src/main.c ****         main_data.averaged_over_5.pot1 = pot1_sums/main_data.current.number_of_samples;
 535              		.loc 1 174 9 is_stmt 1 view .LVU145
 174:Core/Src/main.c ****         main_data.averaged_over_5.pot1 = pot1_sums/main_data.current.number_of_samples;
 536              		.loc 1 174 25 is_stmt 0 view .LVU146
 537 00d4 0022     		movs	r2, #0
 538 00d6 2649     		ldr	r1, .L38+40
 539 00d8 0A60     		str	r2, [r1]
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 34


 175:Core/Src/main.c ****         main_data.averaged_over_5.pot2 = pot2_sums/main_data.current.number_of_samples;
 540              		.loc 1 175 9 is_stmt 1 view .LVU147
 175:Core/Src/main.c ****         main_data.averaged_over_5.pot2 = pot2_sums/main_data.current.number_of_samples;
 541              		.loc 1 175 40 is_stmt 0 view .LVU148
 542 00da 1C4E     		ldr	r6, .L38+4
 543 00dc 254D     		ldr	r5, .L38+44
 544 00de 2988     		ldrh	r1, [r5]
 545 00e0 B1FBF3F1 		udiv	r1, r1, r3
 546 00e4 7182     		strh	r1, [r6, #18]	@ movhi
 176:Core/Src/main.c ****         pot1_sums = 0;
 547              		.loc 1 176 9 is_stmt 1 view .LVU149
 176:Core/Src/main.c ****         pot1_sums = 0;
 548              		.loc 1 176 40 is_stmt 0 view .LVU150
 549 00e6 2448     		ldr	r0, .L38+48
 550 00e8 0188     		ldrh	r1, [r0]
 551 00ea B1FBF3F3 		udiv	r3, r1, r3
 552 00ee B382     		strh	r3, [r6, #20]	@ movhi
 177:Core/Src/main.c ****         pot2_sums = 0;
 553              		.loc 1 177 9 is_stmt 1 view .LVU151
 177:Core/Src/main.c ****         pot2_sums = 0;
 554              		.loc 1 177 19 is_stmt 0 view .LVU152
 555 00f0 2A80     		strh	r2, [r5]	@ movhi
 178:Core/Src/main.c ****       }    
 556              		.loc 1 178 9 is_stmt 1 view .LVU153
 178:Core/Src/main.c ****       }    
 557              		.loc 1 178 19 is_stmt 0 view .LVU154
 558 00f2 0280     		strh	r2, [r0]	@ movhi
 559              	.L30:
 180:Core/Src/main.c ****       pot2_sums += main_data.current.pot2;
 560              		.loc 1 180 7 is_stmt 1 view .LVU155
 180:Core/Src/main.c ****       pot2_sums += main_data.current.pot2;
 561              		.loc 1 180 37 is_stmt 0 view .LVU156
 562 00f4 154F     		ldr	r7, .L38+4
 563 00f6 3B88     		ldrh	r3, [r7]
 180:Core/Src/main.c ****       pot2_sums += main_data.current.pot2;
 564              		.loc 1 180 17 view .LVU157
 565 00f8 1E4A     		ldr	r2, .L38+44
 566 00fa 1188     		ldrh	r1, [r2]
 567 00fc 0B44     		add	r3, r3, r1
 568 00fe 1380     		strh	r3, [r2]	@ movhi
 181:Core/Src/main.c ****       next_navigation = (menu_navigation)joystick.getDirection(&joystick);
 569              		.loc 1 181 7 is_stmt 1 view .LVU158
 181:Core/Src/main.c ****       next_navigation = (menu_navigation)joystick.getDirection(&joystick);
 570              		.loc 1 181 37 is_stmt 0 view .LVU159
 571 0100 7B88     		ldrh	r3, [r7, #2]
 181:Core/Src/main.c ****       next_navigation = (menu_navigation)joystick.getDirection(&joystick);
 572              		.loc 1 181 17 view .LVU160
 573 0102 1D4A     		ldr	r2, .L38+48
 574 0104 1188     		ldrh	r1, [r2]
 575 0106 0B44     		add	r3, r3, r1
 576 0108 1380     		strh	r3, [r2]	@ movhi
 182:Core/Src/main.c ****       event = menu_update(next_navigation);
 577              		.loc 1 182 7 is_stmt 1 view .LVU161
 182:Core/Src/main.c ****       event = menu_update(next_navigation);
 578              		.loc 1 182 42 is_stmt 0 view .LVU162
 579 010a 01A8     		add	r0, sp, #4
 580 010c 079B     		ldr	r3, [sp, #28]
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 35


 581 010e 9847     		blx	r3
 582              	.LVL35:
 583 0110 0646     		mov	r6, r0
 584              	.LVL36:
 183:Core/Src/main.c ****       menu_show();
 585              		.loc 1 183 7 is_stmt 1 view .LVU163
 183:Core/Src/main.c ****       menu_show();
 586              		.loc 1 183 15 is_stmt 0 view .LVU164
 587 0112 FFF7FEFF 		bl	menu_update
 588              	.LVL37:
 589 0116 0546     		mov	r5, r0
 590              	.LVL38:
 184:Core/Src/main.c ****       check_joystick(next_navigation, current_event, &main_data);
 591              		.loc 1 184 7 is_stmt 1 view .LVU165
 592 0118 FFF7FEFF 		bl	menu_show
 593              	.LVL39:
 185:Core/Src/main.c ****       
 594              		.loc 1 185 7 view .LVU166
 595 011c 3A46     		mov	r2, r7
 596 011e 2146     		mov	r1, r4
 597 0120 3046     		mov	r0, r6
 598 0122 FFF7FEFF 		bl	check_joystick
 599              	.LVL40:
 187:Core/Src/main.c ****         handleMenuExitEvent((int) current_event, &main_data);
 600              		.loc 1 187 7 view .LVU167
 187:Core/Src/main.c ****         handleMenuExitEvent((int) current_event, &main_data);
 601              		.loc 1 187 9 is_stmt 0 view .LVU168
 602 0126 012D     		cmp	r5, #1
 603 0128 05D1     		bne	.L31
 188:Core/Src/main.c ****         current_event = MENU_NO_EVENT;
 604              		.loc 1 188 9 is_stmt 1 view .LVU169
 605 012a 3946     		mov	r1, r7
 606 012c 2046     		mov	r0, r4
 607 012e FFF7FEFF 		bl	handleMenuExitEvent
 608              	.LVL41:
 189:Core/Src/main.c ****       }
 609              		.loc 1 189 9 view .LVU170
 189:Core/Src/main.c ****       }
 610              		.loc 1 189 23 is_stmt 0 view .LVU171
 611 0132 0024     		movs	r4, #0
 612 0134 BDE7     		b	.L29
 613              	.LVL42:
 614              	.L31:
 192:Core/Src/main.c ****         if(event != MENU_NO_EVENT) current_event = event;
 615              		.loc 1 192 9 is_stmt 1 view .LVU172
 616 0136 0549     		ldr	r1, .L38+4
 617 0138 2846     		mov	r0, r5
 618 013a FFF7FEFF 		bl	handleMenuEntryEvent
 619              	.LVL43:
 193:Core/Src/main.c ****       }
 620              		.loc 1 193 9 view .LVU173
 193:Core/Src/main.c ****       }
 621              		.loc 1 193 11 is_stmt 0 view .LVU174
 622 013e 002D     		cmp	r5, #0
 623 0140 B7D0     		beq	.L29
 193:Core/Src/main.c ****       }
 624              		.loc 1 193 50 discriminator 1 view .LVU175
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 36


 625 0142 2C46     		mov	r4, r5
 626              	.LVL44:
 193:Core/Src/main.c ****       }
 627              		.loc 1 193 50 discriminator 1 view .LVU176
 628 0144 B5E7     		b	.L29
 629              	.L39:
 630 0146 00BF     		.align	2
 631              	.L38:
 632 0148 D34D6210 		.word	274877907
 633 014c 00000000 		.word	main_data
 634 0150 00000000 		.word	mainMenu
 635 0154 00000000 		.word	hadc1
 636 0158 00000000 		.word	drawMenuItem_Callback2
 637 015c 00000000 		.word	htim6
 638 0160 00000240 		.word	1073872896
 639 0164 00080240 		.word	1073874944
 640 0168 00000000 		.word	ms_sample_ticks
 641 016c 00000000 		.word	ms_menu_ticks
 642 0170 00000000 		.word	ms_smooth_ticks
 643 0174 00000000 		.word	pot1_sums
 644 0178 00000000 		.word	pot2_sums
 645              		.cfi_endproc
 646              	.LFE245:
 648              		.global	pot2_sums
 649              		.section	.bss.pot2_sums,"aw",%nobits
 650              		.align	1
 653              	pot2_sums:
 654 0000 0000     		.space	2
 655              		.global	pot1_sums
 656              		.section	.bss.pot1_sums,"aw",%nobits
 657              		.align	1
 660              	pot1_sums:
 661 0000 0000     		.space	2
 662              		.global	main_data
 663              		.section	.bss.main_data,"aw",%nobits
 664              		.align	2
 667              	main_data:
 668 0000 00000000 		.space	36
 668      00000000 
 668      00000000 
 668      00000000 
 668      00000000 
 669              		.global	ms_smooth_ticks
 670              		.section	.bss.ms_smooth_ticks,"aw",%nobits
 671              		.align	2
 674              	ms_smooth_ticks:
 675 0000 00000000 		.space	4
 676              		.global	ms_sample_ticks
 677              		.section	.bss.ms_sample_ticks,"aw",%nobits
 678              		.align	2
 681              	ms_sample_ticks:
 682 0000 00000000 		.space	4
 683              		.global	ms_menu_ticks
 684              		.section	.bss.ms_menu_ticks,"aw",%nobits
 685              		.align	2
 688              	ms_menu_ticks:
 689 0000 00000000 		.space	4
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 37


 690              		.global	mainMenu
 691              		.section	.rodata.str1.4,"aMS",%progbits,1
 692              		.align	2
 693              	.LC0:
 694 0000 4D61696E 		.ascii	"Main Menu\000"
 694      204D656E 
 694      7500
 695              		.section	.data.mainMenu,"aw"
 696              		.align	2
 699              	mainMenu:
 700 0000 00000000 		.word	.LC0
 701 0004 06       		.byte	6
 702 0005 000000   		.space	3
 703 0008 00000000 		.word	mainList
 704 000c 00000000 		.space	8
 704      00000000 
 705              		.global	mainList
 706              		.section	.data.mainList,"aw"
 707              		.align	2
 710              	mainList:
 711 0000 00000000 		.word	first
 712 0004 00000000 		.word	second
 713 0008 00000000 		.word	third
 714 000c 00000000 		.word	fourth
 715 0010 00000000 		.word	led
 716 0014 00000000 		.word	settings
 717              		.global	settings
 718              		.section	.rodata.str1.4
 719 000a 0000     		.align	2
 720              	.LC1:
 721 000c 53657474 		.ascii	"Settings\000"
 721      696E6773 
 721      00
 722              		.section	.data.settings,"aw"
 723              		.align	2
 726              	settings:
 727 0000 0C000000 		.word	.LC1
 728 0004 01       		.byte	1
 729 0005 000000   		.space	3
 730 0008 00000000 		.word	settingsMenu
 731              		.global	led
 732              		.section	.rodata.str1.4
 733 0015 000000   		.align	2
 734              	.LC2:
 735 0018 4C656400 		.ascii	"Led\000"
 736              		.section	.data.led,"aw"
 737              		.align	2
 740              	led:
 741 0000 18000000 		.word	.LC2
 742 0004 01       		.byte	1
 743 0005 000000   		.space	3
 744 0008 00000000 		.word	ledMenu
 745              		.global	fourth
 746              		.section	.rodata.str1.4
 747              		.align	2
 748              	.LC3:
 749 001c 53706561 		.ascii	"Speaker\000"
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 38


 749      6B657200 
 750              		.section	.data.fourth,"aw"
 751              		.align	2
 754              	fourth:
 755 0000 1C000000 		.word	.LC3
 756 0004 01       		.byte	1
 757 0005 000000   		.space	3
 758 0008 00000000 		.word	speakerMenu
 759              		.global	third
 760              		.section	.rodata.str1.4
 761              		.align	2
 762              	.LC4:
 763 0024 4443206D 		.ascii	"DC motor\000"
 763      6F746F72 
 763      00
 764              		.section	.data.third,"aw"
 765              		.align	2
 768              	third:
 769 0000 24000000 		.word	.LC4
 770 0004 00       		.byte	0
 771 0005 000000   		.space	3
 772 0008 14       		.byte	20
 773 0009 000000   		.space	3
 774              		.global	second
 775              		.section	.rodata.str1.4
 776 002d 000000   		.align	2
 777              	.LC5:
 778 0030 506F7431 		.ascii	"Pot1 | Pot2\000"
 778      207C2050 
 778      6F743200 
 779              		.section	.data.second,"aw"
 780              		.align	2
 783              	second:
 784 0000 30000000 		.word	.LC5
 785 0004 00       		.byte	0
 786 0005 000000   		.space	3
 787 0008 07       		.byte	7
 788 0009 000000   		.space	3
 789              		.global	first
 790              		.section	.rodata.str1.4
 791              		.align	2
 792              	.LC6:
 793 003c 4D616E75 		.ascii	"Manual\000"
 793      616C00
 794              		.section	.data.first,"aw"
 795              		.align	2
 798              	first:
 799 0000 3C000000 		.word	.LC6
 800 0004 01       		.byte	1
 801 0005 000000   		.space	3
 802 0008 00000000 		.word	manMenu
 803              		.global	speakerMenu
 804              		.section	.rodata.str1.4
 805 0043 00       		.align	2
 806              	.LC7:
 807 0044 53706561 		.ascii	"Speaker Menu\000"
 807      6B657220 
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 39


 807      4D656E75 
 807      00
 808              		.section	.data.speakerMenu,"aw"
 809              		.align	2
 812              	speakerMenu:
 813 0000 44000000 		.word	.LC7
 814 0004 02       		.byte	2
 815 0005 000000   		.space	3
 816 0008 00000000 		.word	speakerList
 817 000c 00000000 		.space	8
 817      00000000 
 818              		.global	speakerList
 819              		.section	.data.speakerList,"aw"
 820              		.align	2
 823              	speakerList:
 824 0000 00000000 		.word	normal_speaker
 825 0004 00000000 		.word	melody
 826              		.global	melody
 827              		.section	.rodata.str1.4
 828 0051 000000   		.align	2
 829              	.LC8:
 830 0054 496D7065 		.ascii	"Imperial March\000"
 830      7269616C 
 830      204D6172 
 830      636800
 831              		.section	.data.melody,"aw"
 832              		.align	2
 835              	melody:
 836 0000 54000000 		.word	.LC8
 837 0004 00       		.byte	0
 838 0005 000000   		.space	3
 839 0008 13       		.byte	19
 840 0009 000000   		.space	3
 841              		.global	normal_speaker
 842              		.section	.data.normal_speaker,"aw"
 843              		.align	2
 846              	normal_speaker:
 847 0000 1C000000 		.word	.LC3
 848 0004 00       		.byte	0
 849 0005 000000   		.space	3
 850 0008 12       		.byte	18
 851 0009 000000   		.space	3
 852              		.global	settingsMenu
 853              		.section	.rodata.str1.4
 854 0063 00       		.align	2
 855              	.LC9:
 856 0064 53657474 		.ascii	"Settings Menu\000"
 856      696E6773 
 856      204D656E 
 856      7500
 857              		.section	.data.settingsMenu,"aw"
 858              		.align	2
 861              	settingsMenu:
 862 0000 64000000 		.word	.LC9
 863 0004 02       		.byte	2
 864 0005 000000   		.space	3
 865 0008 00000000 		.word	settingsList
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 40


 866 000c 00000000 		.space	8
 866      00000000 
 867              		.global	settingsList
 868              		.section	.data.settingsList,"aw"
 869              		.align	2
 872              	settingsList:
 873 0000 00000000 		.word	settingsSample
 874 0004 00000000 		.word	settingsPSC
 875              		.global	settingsPSC
 876              		.section	.rodata.str1.4
 877 0072 0000     		.align	2
 878              	.LC10:
 879 0074 44432050 		.ascii	"DC PSC settings\000"
 879      53432073 
 879      65747469 
 879      6E677300 
 880              		.section	.data.settingsPSC,"aw"
 881              		.align	2
 884              	settingsPSC:
 885 0000 74000000 		.word	.LC10
 886 0004 00       		.byte	0
 887 0005 000000   		.space	3
 888 0008 11       		.byte	17
 889 0009 000000   		.space	3
 890              		.global	settingsSample
 891              		.section	.rodata.str1.4
 892              		.align	2
 893              	.LC11:
 894 0084 44432073 		.ascii	"DC sample settings\000"
 894      616D706C 
 894      65207365 
 894      7474696E 
 894      677300
 895              		.section	.data.settingsSample,"aw"
 896              		.align	2
 899              	settingsSample:
 900 0000 84000000 		.word	.LC11
 901 0004 00       		.byte	0
 902 0005 000000   		.space	3
 903 0008 10       		.byte	16
 904 0009 000000   		.space	3
 905              		.global	manMenu
 906              		.section	.rodata.str1.4
 907 0097 00       		.align	2
 908              	.LC12:
 909 0098 4D616E20 		.ascii	"Man Menu\000"
 909      4D656E75 
 909      00
 910              		.section	.data.manMenu,"aw"
 911              		.align	2
 914              	manMenu:
 915 0000 98000000 		.word	.LC12
 916 0004 02       		.byte	2
 917 0005 000000   		.space	3
 918 0008 00000000 		.word	manList
 919 000c 00000000 		.space	8
 919      00000000 
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 41


 920              		.global	manList
 921              		.section	.data.manList,"aw"
 922              		.align	2
 925              	manList:
 926 0000 00000000 		.word	subManual1
 927 0004 00000000 		.word	subManual2
 928              		.global	subManual2
 929              		.section	.rodata.str1.4
 930 00a1 000000   		.align	2
 931              	.LC13:
 932 00a4 46756E63 		.ascii	"Functionality\000"
 932      74696F6E 
 932      616C6974 
 932      7900
 933              		.section	.data.subManual2,"aw"
 934              		.align	2
 937              	subManual2:
 938 0000 A4000000 		.word	.LC13
 939 0004 01       		.byte	1
 940 0005 000000   		.space	3
 941 0008 00000000 		.word	funcMenu
 942              		.global	subManual1
 943              		.section	.rodata.str1.4
 944 00b2 0000     		.align	2
 945              	.LC14:
 946 00b4 4D414E49 		.ascii	"MANIFEST\000"
 946      46455354 
 946      00
 947              		.section	.data.subManual1,"aw"
 948              		.align	2
 951              	subManual1:
 952 0000 B4000000 		.word	.LC14
 953 0004 00       		.byte	0
 954 0005 000000   		.space	3
 955 0008 05       		.byte	5
 956 0009 000000   		.space	3
 957              		.global	funcMenu
 958              		.section	.rodata.str1.4
 959 00bd 000000   		.align	2
 960              	.LC15:
 961 00c0 46756E63 		.ascii	"Func Menu\000"
 961      204D656E 
 961      7500
 962              		.section	.data.funcMenu,"aw"
 963              		.align	2
 966              	funcMenu:
 967 0000 C0000000 		.word	.LC15
 968 0004 08       		.byte	8
 969 0005 000000   		.space	3
 970 0008 00000000 		.word	funcList
 971 000c 00000000 		.space	8
 971      00000000 
 972              		.global	funcList
 973              		.section	.data.funcList,"aw"
 974              		.align	2
 977              	funcList:
 978 0000 00000000 		.word	subsubMenu1
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 42


 979 0004 00000000 		.word	subsubMenu2
 980 0008 00000000 		.word	subsubMenu3
 981 000c 00000000 		.word	subsubMenu4
 982 0010 00000000 		.word	subsubMenu5
 983 0014 00000000 		.word	subsubMenu6
 984 0018 00000000 		.word	subsubMenu7
 985 001c 00000000 		.word	subsubMenu8
 986              		.global	subsubMenu8
 987              		.section	.rodata.str1.4
 988 00ca 0000     		.align	2
 989              	.LC16:
 990 00cc 202D204A 		.ascii	" - Jedi mindtrick\000"
 990      65646920 
 990      6D696E64 
 990      74726963 
 990      6B00
 991              		.section	.data.subsubMenu8,"aw"
 992              		.align	2
 995              	subsubMenu8:
 996 0000 CC000000 		.word	.LC16
 997 0004 00       		.byte	0
 998 0005 000000   		.space	3
 999 0008 0F       		.byte	15
 1000 0009 000000   		.space	3
 1001              		.global	subsubMenu7
 1002              		.section	.rodata.str1.4
 1003 00de 0000     		.align	2
 1004              	.LC17:
 1005 00e0 202D204C 		.ascii	" - LED visual\000"
 1005      45442076 
 1005      69737561 
 1005      6C00
 1006              		.section	.data.subsubMenu7,"aw"
 1007              		.align	2
 1010              	subsubMenu7:
 1011 0000 E0000000 		.word	.LC17
 1012 0004 00       		.byte	0
 1013 0005 000000   		.space	3
 1014 0008 0E       		.byte	14
 1015 0009 000000   		.space	3
 1016              		.global	subsubMenu6
 1017              		.section	.rodata.str1.4
 1018 00ee 0000     		.align	2
 1019              	.LC18:
 1020 00f0 202D2053 		.ascii	" - Speaker\000"
 1020      7065616B 
 1020      657200
 1021              		.section	.data.subsubMenu6,"aw"
 1022              		.align	2
 1025              	subsubMenu6:
 1026 0000 F0000000 		.word	.LC18
 1027 0004 00       		.byte	0
 1028 0005 000000   		.space	3
 1029 0008 0D       		.byte	13
 1030 0009 000000   		.space	3
 1031              		.global	subsubMenu5
 1032              		.section	.rodata.str1.4
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 43


 1033 00fb 00       		.align	2
 1034              	.LC19:
 1035 00fc 202D2050 		.ascii	" - POT control\000"
 1035      4F542063 
 1035      6F6E7472 
 1035      6F6C00
 1036              		.section	.data.subsubMenu5,"aw"
 1037              		.align	2
 1040              	subsubMenu5:
 1041 0000 FC000000 		.word	.LC19
 1042 0004 00       		.byte	0
 1043 0005 000000   		.space	3
 1044 0008 0C       		.byte	12
 1045 0009 000000   		.space	3
 1046              		.global	subsubMenu4
 1047              		.section	.rodata.str1.4
 1048 010b 00       		.align	2
 1049              	.LC20:
 1050 010c 4164642E 		.ascii	"Add. FEATURES:\000"
 1050      20464541 
 1050      54555245 
 1050      533A00
 1051              		.section	.data.subsubMenu4,"aw"
 1052              		.align	2
 1055              	subsubMenu4:
 1056 0000 0C010000 		.word	.LC20
 1057 0004 00       		.byte	0
 1058 0005 000000   		.space	3
 1059 0008 0B       		.byte	11
 1060 0009 000000   		.space	3
 1061              		.global	subsubMenu3
 1062              		.section	.rodata.str1.4
 1063 011b 00       		.align	2
 1064              	.LC21:
 1065 011c 6578706F 		.ascii	"export with UART.\000"
 1065      72742077 
 1065      69746820 
 1065      55415254 
 1065      2E00
 1066              		.section	.data.subsubMenu3,"aw"
 1067              		.align	2
 1070              	subsubMenu3:
 1071 0000 1C010000 		.word	.LC21
 1072 0004 00       		.byte	0
 1073 0005 000000   		.space	3
 1074 0008 0A       		.byte	10
 1075 0009 000000   		.space	3
 1076              		.global	subsubMenu2
 1077              		.section	.rodata.str1.4
 1078 012e 0000     		.align	2
 1079              	.LC22:
 1080 0130 61204443 		.ascii	"a DC-motor. Data\000"
 1080      2D6D6F74 
 1080      6F722E20 
 1080      44617461 
 1080      00
 1081              		.section	.data.subsubMenu2,"aw"
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 44


 1082              		.align	2
 1085              	subsubMenu2:
 1086 0000 30010000 		.word	.LC22
 1087 0004 00       		.byte	0
 1088 0005 000000   		.space	3
 1089 0008 09       		.byte	9
 1090 0009 000000   		.space	3
 1091              		.global	subsubMenu1
 1092              		.section	.rodata.str1.4
 1093 0141 000000   		.align	2
 1094              	.LC23:
 1095 0144 54686973 		.ascii	"This MCU controls\000"
 1095      204D4355 
 1095      20636F6E 
 1095      74726F6C 
 1095      7300
 1096              		.section	.data.subsubMenu1,"aw"
 1097              		.align	2
 1100              	subsubMenu1:
 1101 0000 44010000 		.word	.LC23
 1102 0004 00       		.byte	0
 1103 0005 000000   		.space	3
 1104 0008 08       		.byte	8
 1105 0009 000000   		.space	3
 1106              		.global	ledMenu
 1107              		.section	.rodata.str1.4
 1108 0156 0000     		.align	2
 1109              	.LC24:
 1110 0158 4C656420 		.ascii	"Led Menu\000"
 1110      4D656E75 
 1110      00
 1111              		.section	.data.ledMenu,"aw"
 1112              		.align	2
 1115              	ledMenu:
 1116 0000 58010000 		.word	.LC24
 1117 0004 03       		.byte	3
 1118 0005 000000   		.space	3
 1119 0008 00000000 		.word	ledList
 1120 000c 00000000 		.space	8
 1120      00000000 
 1121              		.global	ledList
 1122              		.section	.data.ledList,"aw"
 1123              		.align	2
 1126              	ledList:
 1127 0000 00000000 		.word	redLed
 1128 0004 00000000 		.word	greenLed
 1129 0008 00000000 		.word	blueLed
 1130              		.global	blueLed
 1131              		.section	.rodata.str1.4
 1132 0161 000000   		.align	2
 1133              	.LC25:
 1134 0164 426C7565 		.ascii	"Blue LED\000"
 1134      204C4544 
 1134      00
 1135              		.section	.data.blueLed,"aw"
 1136              		.align	2
 1139              	blueLed:
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 45


 1140 0000 64010000 		.word	.LC25
 1141 0004 00       		.byte	0
 1142 0005 000000   		.space	3
 1143 0008 04       		.byte	4
 1144 0009 000000   		.space	3
 1145              		.global	greenLed
 1146              		.section	.rodata.str1.4
 1147 016d 000000   		.align	2
 1148              	.LC26:
 1149 0170 47726565 		.ascii	"Green LED\000"
 1149      6E204C45 
 1149      4400
 1150              		.section	.data.greenLed,"aw"
 1151              		.align	2
 1154              	greenLed:
 1155 0000 70010000 		.word	.LC26
 1156 0004 00       		.byte	0
 1157 0005 000000   		.space	3
 1158 0008 03       		.byte	3
 1159 0009 000000   		.space	3
 1160              		.global	redLed
 1161              		.section	.rodata.str1.4
 1162 017a 0000     		.align	2
 1163              	.LC27:
 1164 017c 52656420 		.ascii	"Red LED\000"
 1164      4C454400 
 1165              		.section	.data.redLed,"aw"
 1166              		.align	2
 1169              	redLed:
 1170 0000 7C010000 		.word	.LC27
 1171 0004 00       		.byte	0
 1172 0005 000000   		.space	3
 1173 0008 02       		.byte	2
 1174 0009 000000   		.space	3
 1175              		.text
 1176              	.Letext0:
 1177              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1178              		.file 4 "C:/Users/silsp/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 1179              		.file 5 "C:/Users/silsp/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 1180              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1181              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1182              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1183              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1184              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1185              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1186              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1187              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1188              		.file 14 "Core/Inc/main.h"
 1189              		.file 15 "Core/Inc/adc.h"
 1190              		.file 16 "Core/Inc/tim.h"
 1191              		.file 17 "Core/Inc/button_driver.h"
 1192              		.file 18 "Core/Inc/button.h"
 1193              		.file 19 "Core/Inc/joyStick.h"
 1194              		.file 20 "Core/Inc/lcd_menu.h"
 1195              		.file 21 "Core/Inc/lcd_menu_definition.h"
 1196              		.file 22 "Core/Inc/my_event_handler.h"
 1197              		.file 23 "Core/Inc/my_funcs.h"
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 46


 1198              		.file 24 "Core/Inc/lcd_driver.h"
 1199              		.file 25 "Core/Inc/spi.h"
 1200              		.file 26 "Core/Inc/usart.h"
 1201              		.file 27 "Core/Inc/dma.h"
 1202              		.file 28 "Core/Inc/gpio.h"
 1203              		.file 29 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1204              		.file 30 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pwr_ex.h"
 1205              		.file 31 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1206              		.file 32 "<built-in>"
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 47


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:21     .text.HAL_GPIO_EXTI_Callback:00000000 $t
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:27     .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:55     .text.HAL_GPIO_EXTI_Callback:00000014 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:667    .bss.main_data:00000000 main_data
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:60     .text.HAL_SYSTICK_Callback:00000000 $t
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:66     .text.HAL_SYSTICK_Callback:00000000 HAL_SYSTICK_Callback
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:96     .text.HAL_SYSTICK_Callback:0000001c $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:688    .bss.ms_menu_ticks:00000000 ms_menu_ticks
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:681    .bss.ms_sample_ticks:00000000 ms_sample_ticks
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:674    .bss.ms_smooth_ticks:00000000 ms_smooth_ticks
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:103    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:109    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:143    .text.HAL_TIM_PeriodElapsedCallback:0000001c $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:149    .text.Error_Handler:00000000 $t
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:155    .text.Error_Handler:00000000 Error_Handler
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:187    .text.SystemClock_Config:00000000 $t
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:193    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:351    .text.SystemClock_Config:000000a8 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:357    .text.main:00000000 $t
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:363    .text.main:00000000 main
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:632    .text.main:00000148 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:699    .data.mainMenu:00000000 mainMenu
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:660    .bss.pot1_sums:00000000 pot1_sums
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:653    .bss.pot2_sums:00000000 pot2_sums
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:650    .bss.pot2_sums:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:657    .bss.pot1_sums:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:664    .bss.main_data:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:671    .bss.ms_smooth_ticks:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:678    .bss.ms_sample_ticks:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:685    .bss.ms_menu_ticks:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:692    .rodata.str1.4:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:696    .data.mainMenu:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:710    .data.mainList:00000000 mainList
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:707    .data.mainList:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:798    .data.first:00000000 first
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:783    .data.second:00000000 second
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:768    .data.third:00000000 third
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:754    .data.fourth:00000000 fourth
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:740    .data.led:00000000 led
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:726    .data.settings:00000000 settings
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:723    .data.settings:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:861    .data.settingsMenu:00000000 settingsMenu
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:737    .data.led:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1115   .data.ledMenu:00000000 ledMenu
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:751    .data.fourth:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:812    .data.speakerMenu:00000000 speakerMenu
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:765    .data.third:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:780    .data.second:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:795    .data.first:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:914    .data.manMenu:00000000 manMenu
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:809    .data.speakerMenu:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:823    .data.speakerList:00000000 speakerList
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:820    .data.speakerList:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:846    .data.normal_speaker:00000000 normal_speaker
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:835    .data.melody:00000000 melody
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 48


C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:832    .data.melody:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:843    .data.normal_speaker:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:858    .data.settingsMenu:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:872    .data.settingsList:00000000 settingsList
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:869    .data.settingsList:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:899    .data.settingsSample:00000000 settingsSample
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:884    .data.settingsPSC:00000000 settingsPSC
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:881    .data.settingsPSC:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:896    .data.settingsSample:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:911    .data.manMenu:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:925    .data.manList:00000000 manList
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:922    .data.manList:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:951    .data.subManual1:00000000 subManual1
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:937    .data.subManual2:00000000 subManual2
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:934    .data.subManual2:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:966    .data.funcMenu:00000000 funcMenu
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:948    .data.subManual1:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:963    .data.funcMenu:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:977    .data.funcList:00000000 funcList
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:974    .data.funcList:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1100   .data.subsubMenu1:00000000 subsubMenu1
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1085   .data.subsubMenu2:00000000 subsubMenu2
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1070   .data.subsubMenu3:00000000 subsubMenu3
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1055   .data.subsubMenu4:00000000 subsubMenu4
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1040   .data.subsubMenu5:00000000 subsubMenu5
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1025   .data.subsubMenu6:00000000 subsubMenu6
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1010   .data.subsubMenu7:00000000 subsubMenu7
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:995    .data.subsubMenu8:00000000 subsubMenu8
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:992    .data.subsubMenu8:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1007   .data.subsubMenu7:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1022   .data.subsubMenu6:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1037   .data.subsubMenu5:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1052   .data.subsubMenu4:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1067   .data.subsubMenu3:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1082   .data.subsubMenu2:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1097   .data.subsubMenu1:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1112   .data.ledMenu:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1126   .data.ledList:00000000 ledList
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1123   .data.ledList:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1169   .data.redLed:00000000 redLed
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1154   .data.greenLed:00000000 greenLed
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1139   .data.blueLed:00000000 blueLed
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1136   .data.blueLed:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1151   .data.greenLed:00000000 $d
C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s:1166   .data.redLed:00000000 $d

UNDEFINED SYMBOLS
htim6
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_Init
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
ARM GAS  C:\Users\silsp\AppData\Local\Temp\ccbbSWck.s 			page 49


MX_GPIO_Init
MX_DMA_Init
MX_TIM6_Init
MX_ADC1_Init
MX_USART2_UART_Init
MX_SPI1_Init
MX_TIM3_Init
MX_TIM2_Init
lcd_init
menu_setMainMenu
Joystick_init
HAL_ADC_Start_DMA
menu_registerDrawMenuItem2
HAL_TIM_Base_Start_IT
HAL_GPIO_WritePin
screen_setup
menu_update
menu_show
check_joystick
handleMenuExitEvent
handleMenuEntryEvent
hadc1
drawMenuItem_Callback2
